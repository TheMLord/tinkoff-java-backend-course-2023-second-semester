package edu.java.domain.jooq.tables;

import edu.java.domain.jooq.DefaultSchema;
import edu.java.domain.jooq.Keys;
import edu.java.domain.jooq.tables.records.RelationRecord;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Relation extends TableImpl<RelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RELATION</code>
     */
    public static final Relation RELATION = new Relation();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<RelationRecord> getRecordType() {
        return RelationRecord.class;
    }

    /**
     * The column <code>RELATION.ID</code>.
     */
    public final TableField<RelationRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>RELATION.CHAT_ID</code>.
     */
    public final TableField<RelationRecord, Long> CHAT_ID = createField(DSL.name("CHAT_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>RELATION.LINK_ID</code>.
     */
    public final TableField<RelationRecord, Long> LINK_ID = createField(DSL.name("LINK_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>RELATION.CREATED_AT</code>.
     */
    public final TableField<RelationRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("LOCALTIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>RELATION.CREATED_BY</code>.
     */
    public final TableField<RelationRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(1000000000).nullable(false).defaultValue(DSL.field(DSL.raw("'themlord'"), SQLDataType.VARCHAR)), this, "");

    private Relation(Name alias, Table<RelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Relation(Name alias, Table<RelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>RELATION</code> table reference
     */
    public Relation(String alias) {
        this(DSL.name(alias), RELATION);
    }

    /**
     * Create an aliased <code>RELATION</code> table reference
     */
    public Relation(Name alias) {
        this(alias, RELATION);
    }

    /**
     * Create a <code>RELATION</code> table reference
     */
    public Relation() {
        this(DSL.name("RELATION"), null);
    }

    public <O extends Record> Relation(Table<O> child, ForeignKey<O, RelationRecord> key) {
        super(child, key, RELATION);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public Identity<RelationRecord, Long> getIdentity() {
        return (Identity<RelationRecord, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<RelationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    @NotNull
    public List<ForeignKey<RelationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CHAT, Keys.FK_LINK);
    }

    private transient Tgchat _tgchat;
    private transient Link _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.TGCHAT</code> table.
     */
    public Tgchat tgchat() {
        if (_tgchat == null)
            _tgchat = new Tgchat(this, Keys.FK_CHAT);

        return _tgchat;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public Link link() {
        if (_link == null)
            _link = new Link(this, Keys.FK_LINK);

        return _link;
    }

    @Override
    @NotNull
    public Relation as(String alias) {
        return new Relation(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public Relation as(Name alias) {
        return new Relation(alias, this);
    }

    @Override
    @NotNull
    public Relation as(Table<?> alias) {
        return new Relation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Relation rename(String name) {
        return new Relation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Relation rename(Name name) {
        return new Relation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public Relation rename(Table<?> name) {
        return new Relation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Long, Long, Long, OffsetDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
